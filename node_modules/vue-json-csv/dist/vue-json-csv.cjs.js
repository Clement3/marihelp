'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _ = _interopDefault(require('lodash'));
var Download = _interopDefault(require('downloadjs'));
var PapaParse = _interopDefault(require('papaparse'));

//
var script = {
  name: 'JsonCSV',
  props: {
    /**
     * Json to download
     */
    data: {
      type: Array,
      required: true
    },

    /**
     * fields inside the Json Object that you want to export
     * if no given, all the properties in the Json are exported
     * Can either be an array or a function
     */
    fields: {
      required: false
    },

    /**
     * filename to export, default: data.csv
     */
    name: {
      type: String,
      default: 'data.csv'
    },

    /**
     * Delimiter for the CSV file
     */
    delimiter: {
      type: String,
      default: ',',
      required: false
    },

    /**
     * Should the module add SEP={delimiter}
     *
     * Useful for opening file with Excel
     */
    separatorExcel: {
      type: Boolean,
      default: false
    },

    /**
     * What will be the encoding of the file
     */
    encoding: {
      type: String,
      default: 'utf8'
    },

    /**
     * Advanced options for Papaparse that is used to export to CSV
     */
    advancedOptions: {
      type: Object,
      default: function () {}
    },

    /**
     * Labels for columns
     *
     * Object or function
     */
    labels: {
      required: false
    },

    /**
     * Used only for testing purposes
     */
    testing: {
      required: false,
      default: false
    }
  },
  computed: {
    // unique identifier
    idName: function idName() {
      var now = new Date().getTime();
      return 'export_' + now;
    },

    exportableData: function exportableData() {
      var filteredData = this.cleaningData();

      if (!filteredData.length) {
        return null;
      }

      return filteredData;
    }

  },
  methods: {
    labelsFunctionGenerator: function labelsFunctionGenerator() {
      var this$1 = this;

      if (!_.isUndefined(this.labels) && !_.isFunction(this.labels) && !_.isObject(this.labels)) {
        throw new Error('Labels needs to be a function(value,key) or object.');
      }

      if (_.isFunction(this.labels)) {
        return function (item) {
          var mapKeys = _.mapKeys(item, this$1.labels);

          console.log(mapKeys);
          return mapKeys;
        };
      }

      if (_.isObject(this.labels)) {
        return function (item) {
          return _.mapKeys(item, function (item, key) {
            return this$1.labels[key] || key;
          });
        };
      }

      return function (item) { return item; };
    },

    fieldsFunctionGenerator: function fieldsFunctionGenerator() {
      var this$1 = this;

      if (!_.isUndefined(this.fields) && !_.isFunction(this.fields) && !_.isObject(this.fields) && !_.isArray(this.fields)) {
        throw new Error('Fields needs to be a function(value,key) or array.');
      }

      if (_.isFunction(this.fields) || _.isObject(this.fields) && !_.isArray(this.fields)) {
        return function (item) {
          return _.pickBy(item, this$1.fields);
        };
      }

      if (_.isArray(this.fields)) {
        return function (item) {
          return _.pick(item, this$1.fields);
        };
      }

      return function (item) { return item; };
    },

    cleaningData: function cleaningData() {
      if (_.isUndefined(this.fields) && _.isUndefined(this.labels)) {
        return this.data;
      }

      var labels = this.labelsFunctionGenerator();
      var fields = this.fieldsFunctionGenerator();
      return _.map(this.data, function (item) { return labels(fields(item)); });
    },

    generate: function generate() {
      this.$emit('export-started');
      var dataExport = this.exportableData;

      if (!dataExport) {
        console.error('No data to export');
        return;
      }

      var csv = PapaParse.unparse(dataExport, Object.assign({
        delimiter: this.delimiter,
        encoding: this.encoding
      }, this.advancedOptions));

      if (this.separatorExcel) {
        csv = 'SEP=' + this.delimiter + '\r\n' + csv;
      }

      this.$emit('export-finished');

      if (!this.testing) {
        Download(csv, this.name, 'application/csv');
      }
    }

  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

/* script */
var __vue_script__ = script;
// For security concerns, we use only base name in production mode. See https://github.com/vuejs/rollup-plugin-vue/issues/258
script.__file = "JsonCSV.vue";
/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":_vm.idName},on:{"click":_vm.generate}},[_vm._t("default",[_vm._v("\n        Download "+_vm._s(_vm.name)+"\n    ")])],2)};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = "data-v-02304a84";
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var JsonCSV = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

module.exports = JsonCSV;
